<project name="MMBase" default="rmmci" basedir=".">
  <target name="init">
	  <mkdir dir="build/classes"/>
	  <available property="dummy" classname="dummy">
	  <classpath id="classpath">
		  <fileset dir="../../build/lib"><include name="*.jar"/></fileset>
		  <fileset dir="../../build/mmbase/mmbase-webapp/WEB-INF/lib"><include name="mmbase.jar"/></fileset>
	  </classpath>
          </available>

  </target>
  <!-- =================================================================== -->
  <!-- (Step 1 for remote) Compile the remote generator classes            -->
  <!-- =================================================================== -->
  <target name="compile.remote.generator" description="Compile the remote generator classes" depends="init">
    <javac srcdir="src" destdir="build/classes" classpathref="classpath" debug="yes" optimize="yes">
           <include name="org/mmbase/bridge/remote/generator/*.java"/>
    </javac>
  </target>


  <!-- =================================================================== -->
  <!-- check if MMCI.xml is present                                        -->
  <!-- =================================================================== -->
  <target name="check.mmci.xml.present" description="check if MMCI.xml is present" depends="init">
	  <available property="mmci.xml.present" file="build/src/MMCI.xml"/>
  </target>

  <!-- =================================================================== -->
  <!-- (Step 2 for remote) Generate the source for the remote classes      -->
  <!-- =================================================================== -->
  <target name="generate.remote"
          description="Generate the source for the remote classes"
  depends="init,compile.remote.generator,check.mmci.xml.present"
          unless="mmci.xml.present">


	  <mkdir dir="build/src/org/mmbase/bridge/remote"/>
    <!-- fork="true" is needed because MMBase uses some xerces classes directly but ant is
       using the sun jaxp implementation. By forking we do not use theant classloader -->

    <java classname="org.mmbase.bridge.remote.generator.MMCI" fork="true" classpathref="classpath" >
	    <arg value="build/src/MMCI.xml" />
  <classpath>
    <pathelement location="build/classes" />
  </classpath>
    </java>
  <!-- fork="true" is also needed for the RemoteGenerator so we do not use the ant classloader -->
    <java classname="org.mmbase.bridge.remote.generator.RemoteGenerator" classpathref="classpath" fork="true" >
	    <arg value="build/src"/>
	    <arg value="build/src/MMCI.xml"/>
      <classpath>
        <pathelement location="build/classes"/>
      </classpath>
    </java>
  </target>


  <!-- =================================================================== -->
  <!-- (Step 3 for remote) Compile the remote classes                      -->
  <!-- =================================================================== -->
  <target name="compile.remote" description="Compile the remote classes" depends="init,generate.remote">
    <javac
           destdir="build/classes"
           classpathref="classpath"
           debug="yes"
	   optimize="yes">
	   <src path="build/src" />
      <src path="src" />
      <include name="org/mmbase/bridge/remote/*.java"/>
      <include name="org/mmbase/bridge/remote/rmi/*.java"/>
      <include name="org/mmbase/bridge/remote/implementation/*.java"/>
    </javac>
    <rmic base="build/classes" classpathref="classpath">
      <include name="org/mmbase/bridge/remote/rmi/*.class"/>
        <classpath>
           <pathelement location="build/classes"/>
        </classpath>
    </rmic>
    <javac
           destdir="build/classes"
           classpathref="classpath"
           debug="yes"
	   optimize="yes">
	   <src path="build/src" />
      <src path="src" />
      <include name="org/mmbase/bridge/ContextProvider.java"/>
      <include name="org/mmbase/module/RemoteMMCI.java"/>
    </javac>
  </target>

  <!-- =================================================================== -->
  <!-- Create rmmci.jar                                                    -->
  <!-- =================================================================== -->
  <target name="rmmci" depends="compile.remote">
    <mkdir dir="build/rmmcitmp"/>
    <unjar src="../../build/lib/servlet.jar" dest="build/rmmcitmp" />
    <unjar src="../../build/lib/xml-apis.jar" dest="build/rmmcitmp" />
    <echo file="build/rmmcitmp/manifest.mf">
Name: org/mmbase
Vendor: MMBase Community
URL: http://www.mmbase.org
Comment: The Remote MMBase Cloud Interfaces to connect to MMBase.
Version: ${distro}.${builddate}
Distribution: ${distro}
Build-by: ${ant.version}
Build-java-version: ${ant.java.version}
Build-compiler: ${build.compiler}
</echo>

    <jar jarfile="build/rmmci.jar"
         manifest="build/rmmcitmp/manifest.mf"
    >
       <fileset dir="build/classes">
        <include name="org/mmbase/**"/>
       </fileset>
       <fileset dir="build/rmmcitmp">
        <include name="org/w3c/dom/Document.class"/>
        <include name="org/w3c/dom/Node.class"/>
        <include name="org/w3c/dom/Element.class"/>
        <include name="javax/servlet/ServletRequest.class"/>
        <include name="javax/servlet/ServletResponse.class"/>
        <include name="javax/servlet/http/HttpServletRequest.class"/>
        <include name="javax/servlet/http/HttpServletResponse.class"/>
       </fileset>
    </jar>
    <delete dir="build/rmmcitmp" />
  </target>

  <!-- =================================================================== -->
  <!-- Clean the remote-classes                                            -->
  <!-- =================================================================== -->
  <target name="clean" depends="init">
    <delete failonerror="false" dir="build/src"/>
  </target>
</project>
