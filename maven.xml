<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is OSI Certified Open Source Software.
OSI Certified is a certification mark of the Open Source Initiative.

The license (Mozilla version 1.0) can be read at the MMBase site.
See http://www.MMBase.org/license
-->
<project xmlns:j="jelly:core"
	xmlns:ant="jelly:ant"
	xmlns:maven="jelly:maven"
	xmlns:artifact="artifact">

  	<preGoal name="java:init">
	    <attainGoal name="rmmci-generator:generate.remote"/>
	</preGoal>

  	<postGoal name="jar:jar">
	    <attainGoal name="rmmci-generator:create.clientjar"/>
	</postGoal>

  	<postGoal name="jar:install">
	    <attainGoal name="rmmci-generator:upload.clientjar"/>
	</postGoal>
  	<postGoal name="mmbase-module:install">
	    <attainGoal name="rmmci-generator:upload.clientjar"/>
	</postGoal>

    <goal name="rmmci-generator:generato.compile">
      <attainGoal name="java:prepare-filesystem" />
      <ant:mkdir dir="${maven.build.dir}/generator/classes"/>

      <ant:javac srcdir="${basedir}/generator/src"
               destdir="${maven.build.dir}/generator/classes"
               debug="yes"
               source="1.5"
               optimize="yes">
          <ant:classpath>
            <ant:path refid="maven.dependency.classpath"/>
          </ant:classpath>
      </ant:javac>
    </goal>

    <!-- =================================================================== -->
    <!-- Generate the source for the remote classes      -->
    <!-- =================================================================== -->
    <goal name="rmmci-generator:generate.remote" prereqs="rmmci-generator:generato.compile">

      <ant:mkdir dir="${maven.build.dir}/generated-src/main/java/org/mmbase/bridge/remote"/>
      <!-- fork="true" is needed because MMBase uses some xerces classes directly but ant is
           using the sun jaxp implementation. By forking we do not use the ant classloader -->
      <ant:java classname="org.mmbase.bridge.remote.generator.RMMCI" fork="true">
        <ant:classpath>
          <ant:path refid="maven.dependency.classpath"/>
          <ant:pathelement location="${maven.build.dir}/generator/classes"/>
        </ant:classpath>
        <ant:arg value="${maven.build.dir}/generated-src/main/java"/>
      </ant:java>

      <ant:path id="maven.mmbase.generator.compile.src.set" location="${maven.build.dir}/generated-src/main/java"/>
      <maven:addPath id="maven.compile.src.set" refid="maven.mmbase.generator.compile.src.set"/>
    </goal>

  <goal name="rmmci-generator:create.clientjar">
    <j:set var="client.build.dir" value="${maven.build.dir}/client/classes"/>

    <ant:mkdir dir="${client.build.dir}"/>

    <j:forEach var="lib" items="${pom.artifacts}">
      <j:set var="dep" value="${lib.dependency}"/>
      <j:if test="${dep.type =='jar' and dep.groupId == 'mmbase' and dep.artifactId == 'mmbase'}">
        <ant:unjar src="${lib.path}" dest="${client.build.dir}">
          <patternset>
            <include name="org/mmbase/bridge/*"/>                         <!-- of course -->
            <include name="org/mmbase/bridge/util/**"/>            <!-- not essential, but the idea is that you could use those with any bridge impl, so you should want them -->
            <include name="org/mmbase/storage/search/*"/>                 <!-- those interfaces are  part of bridge -->

            <exclude name="org/mmbase/storage/search/SearchQueryHandler"/><!-- Has a dependency on MMObjectNode -->


            <include name="org/mmbase/datatypes/**"/>                    <!-- datatype classes are bridge -->
            <include name="org/mmbase/security/UserContext.class"/>       <!-- security classes are bridge -->
            <include name="org/mmbase/security/BasicUser.class"/>       <!-- security classes are bridge -->
            <include name="org/mmbase/security/AuthenticationData*.class"/> <!-- security classes are bridge -->
            <include name="org/mmbase/security/Rank.class"/>              <!-- security classes are bridge -->
            <include name="org/mmbase/security/SecurityException.class"/> <!-- security classes are bridge -->
            <include name="org/mmbase/security/Action*.class"/> <!-- security classes are bridge -->
            <include name="org/mmbase/security/Configurable*.class"/> <!-- security classes are bridge -->

            <include name="org/mmbase/util/functions/**"/>               <!-- functions are bridge -->

            <include name="org/mmbase/cache/CachePolicy*"/>              <!-- used in bridge -->
            <include name="org/mmbase/cache/Cache*"/>                    <!-- used by SortedBundle, but any how it is utility -->
            <include name="org/mmbase/cache/**"/>                         <!-- used by SortedBundle, but any how it is utility -->
            <include name="org/mmbase/util/LRUHashtable*"/>              <!-- cache implementation -->

      <!-- perhaps we need _all_ of util ? -->
            <include name="org/mmbase/util/logging/**"/>                  <!-- every class use, and it's no real burden to have it -->
            <include name="org/mmbase/util/ResourceLoader*.class"/>       <!-- well... -->
            <include name="org/mmbase/util/ResourceWatcher*.class"/>      <!--  -->
            <include name="org/mmbase/util/LocalizedString.class"/>         <!-- returned by bridge -->
            <include name="org/mmbase/util/ReplacingLocalizedString*.class"/> <!-- returned by bridge -->
            <include name="org/mmbase/util/EncodingDetectingOutputStreamWriter.class"/> <!-- used by resourceloader -->
            <include name="org/mmbase/util/FileWatcher*.class"/>             <!-- used by resourceloader -->
            <include name="org/mmbase/util/Entry.class"/>                    <!-- used by LocalizedString -->
            <include name="org/mmbase/util/LocalizedEntryListFactory*.class"/> <!-- returned by DataType -->
            <include name="org/mmbase/util/SortedBundle*.class"/>            <!-- Used by LocalizedEntryListFactory -->
            <include name="org/mmbase/util/ChainedIterator*.class"/>            <!-- Used by LocalizedEntryListFactory -->
            <include name="org/mmbase/util/SizeMeasurable.class"/>           <!-- implemented by several class -->
            <include name="org/mmbase/util/Casting*.class"/>                 <!-- widely used -->
            <include name="org/mmbase/util/StringBuilderWriter.class"/>      <!-- used by Casting -->
            <include name="org/mmbase/util/StringBufferWriter.class"/>       <!-- used by Datatype Restrictions -->
            <include name="org/mmbase/util/WrappedLocalizedString.class"/>  <!-- used by Casting -->
            <include name="org/mmbase/util/Encode.class"/>                   <!-- general utility -->
            <include name="org/mmbase/util/transformers/**.class"/>          <!-- used by Encode -->
            <include name="org/mmbase/util/xml/**"/>
            <include name="org/mmbase/util/XMLEntityResolver*.class"/>        <!-- -->
            <include name="org/mmbase/util/XMLErrorHandler.class"/>           <!-- -->
            <include name="org/mmbase/util/DynamicDate.class"/>              <!-- used by Casting -->
            <include name="org/mmbase/util/DateFormats*.class"/>
            <include name="org/mmbase/util/dateparser/**"/>                  <!-- used by Casting -->
            <include name="org/mmbase/util/HashCodeUtil*"/>                  <!-- used by SortedBundle, but is generic tool-->
            <include name="org/mmbase/util/PublicCloneable*"/>                  <!-- used by SortedBundle, but is generic tool-->
            <include name="org/mmbase/util/StringSplitter*"/>                  <!-- used by Queries-->

            <include name="org/mmbase/storage/Storable.class"/>              <!-- DataTypes uses .. -->
            <include name="org/mmbase/storage/StorageException.class"/>      <!--  -->
            <include name="org/mmbase/storage/StorageNotFoundException.class"/> <!-- may be thrown through bridge. -->


            <include name="org/mmbase/core/util/Fields.class"/>              <!-- DataTypes uses .. -->
            <include name="org/mmbase/core/*.class"/>                        <!-- DataTypes uses .. -->
            <include name="org/mmbase/core/event/**"/>                        <!--  -->

            <include name="org/mmbase/module/core/MMBaseObserver.class"/>    <!-- resourcewatcher extends -->
            <include name="org/mmbase/module/corebuilders/FieldDefs.class"/> <!-- DataTypes uses .. -->

            <include name="org/mmbase/util/RandomPool*"/>                    <!-- Used in test cases .. -->
            <include name="org/mmbase/util/PasswordGenerator*"/>             <!-- Used in test cases .. -->
            <include name="org/mmbase/config/functions/**"/>                 <!-- Used in test cases .. -->
          </patternset>
        </ant:unjar>
      </j:if>

      <!-- external interfaces used by bridge, but not always present client side, so provide them. -->
      <j:if test="${dep.type =='jar' and dep.groupId == 'servletapi' and dep.artifactId == 'servletapi'}">
        <ant:unjar src="${lib.path}" dest="${client.build.dir}">
          <patternset>
            <include name="javax/servlet/ServletRequest.class"/>
            <include name="javax/servlet/ServletResponse.class"/>
            <include name="javax/servlet/http/HttpServletRequest.class"/>
            <include name="javax/servlet/http/HttpServletResponse.class"/>
          </patternset>
        </ant:unjar>
      </j:if>
    </j:forEach>

    <ant:unjar src="${maven.build.dir}/${maven.jar.final.name}" dest="${client.build.dir}">
      <patternset>
        <include name="org/mmbase/bridge/remote/*"/>
        <include name="org/mmbase/bridge/remote/rmi/*"/>
        <include name="org/mmbase/bridge/remote/util/*"/>
        <include name="org/mmbase/bridge/remote/proxy/*"/>
      </patternset>
    </ant:unjar>

    <j:set var="client.final.name" value="${pom.artifactId}-client${maven.final.name.substring(pom.artifactId.length())}"/>
    <ant:jar
         destfile="${maven.build.dir}/${client.final.name}.jar"
         basedir="${client.build.dir}"
         update="true"
         index="${maven.jar.index}">
      <ant:metainf dir="${licenseFile.canonicalFile.parent}">
        <ant:include name="${licenseFile.canonicalFile.name}"/>
      </ant:metainf>

      <ant:manifest>
        <ant:attribute name="Built-By" value="${user.name}" />
        <ant:section name="${pom.package}">
          <ant:attribute name="Specification-Title" value="${pom.artifactId}-client" />
          <ant:attribute name="Specification-Version"
                     value="${pom.currentVersion}" />
          <ant:attribute name="Specification-Vendor"
                     value="${pom.organization.name}" />
          <ant:attribute name="Implementation-Title"
                     value="${pom.package}" />
          <ant:attribute name="Implementation-Version"
                     value="${pom.currentVersion}" />
          <ant:attribute name="Implementation-Vendor"
                     value="${pom.organization.name}" />
        </ant:section>
      </ant:manifest>
    </ant:jar>
  </goal>

  <goal name="rmmci-generator:upload.clientjar">
  	 <j:set var="client.final.name" value="${pom.artifactId}-client${maven.final.name.substring(pom.artifactId.length())}"/>
     <artifact:install
        artifact="${maven.build.dir}/${client.final.name}.jar"
        artifactIdOverride="${pom.artifactId}-client"
        type="jar"
        project="${pom}"/>
  </goal>

</project>
